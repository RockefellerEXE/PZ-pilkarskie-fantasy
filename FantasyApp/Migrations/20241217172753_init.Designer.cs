// <auto-generated />
using System;
using FantasyApp.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FantasyApp.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241217172753_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.27")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FantasyApp.Models.Klub", b =>
                {
                    b.Property<int>("KlubId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KlubId"), 1L, 1);

                    b.Property<string>("NazwaKlubu")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("KlubId");

                    b.ToTable("Kluby");
                });

            modelBuilder.Entity("FantasyApp.Models.Mecz", b =>
                {
                    b.Property<int>("MeczId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MeczId"), 1L, 1);

                    b.Property<DateTime>("DataMeczu")
                        .HasColumnType("datetime2");

                    b.Property<string>("DruzynaDomowa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DruzynaWyjazdowa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Wynik")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MeczId");

                    b.ToTable("Mecze");
                });

            modelBuilder.Entity("FantasyApp.Models.StatystykiZawodnika", b =>
                {
                    b.Property<int>("StatystykaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatystykaId"), 1L, 1);

                    b.Property<int>("Asysty")
                        .HasColumnType("int");

                    b.Property<int>("Bramki")
                        .HasColumnType("int");

                    b.Property<int>("BramkiSamobojcze")
                        .HasColumnType("int");

                    b.Property<int>("CzerwonaKartka")
                        .HasColumnType("int");

                    b.Property<int>("KarneWykonane")
                        .HasColumnType("int");

                    b.Property<int>("KarneZmarnowane")
                        .HasColumnType("int");

                    b.Property<int>("MeczId")
                        .HasColumnType("int");

                    b.Property<int>("Minuty")
                        .HasColumnType("int");

                    b.Property<int>("Punkty")
                        .HasColumnType("int");

                    b.Property<int>("StrzalyObronione")
                        .HasColumnType("int");

                    b.Property<int>("ZawodnikId")
                        .HasColumnType("int");

                    b.Property<int>("ZoltaKartka")
                        .HasColumnType("int");

                    b.HasKey("StatystykaId");

                    b.HasIndex("MeczId");

                    b.HasIndex("ZawodnikId");

                    b.ToTable("StatystykiZawodnikow");
                });

            modelBuilder.Entity("FantasyApp.Models.Uzytkownik", b =>
                {
                    b.Property<int>("UzytkownikId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UzytkownikId"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Haslo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Punkty")
                        .HasColumnType("int");

                    b.HasKey("UzytkownikId");

                    b.ToTable("Uzytkownicy");
                });

            modelBuilder.Entity("FantasyApp.Models.Zawodnik", b =>
                {
                    b.Property<int>("ZawodnikId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ZawodnikId"), 1L, 1);

                    b.Property<DateTime>("DataUrodzenia")
                        .HasColumnType("datetime2");

                    b.Property<string>("Imie")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("KlubId")
                        .HasColumnType("int");

                    b.Property<string>("Narodowosc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nazwisko")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pozycja")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("cena")
                        .HasColumnType("float");

                    b.Property<int>("posiadanie")
                        .HasColumnType("int");

                    b.Property<int>("punkty")
                        .HasColumnType("int");

                    b.HasKey("ZawodnikId");

                    b.HasIndex("KlubId");

                    b.ToTable("Zawodnicy");
                });

            modelBuilder.Entity("FantasyApp.Models.StatystykiZawodnika", b =>
                {
                    b.HasOne("FantasyApp.Models.Mecz", "Mecz")
                        .WithMany("Statystyki")
                        .HasForeignKey("MeczId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FantasyApp.Models.Zawodnik", "Zawodnik")
                        .WithMany("Statystyki")
                        .HasForeignKey("ZawodnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mecz");

                    b.Navigation("Zawodnik");
                });

            modelBuilder.Entity("FantasyApp.Models.Zawodnik", b =>
                {
                    b.HasOne("FantasyApp.Models.Klub", "Klub")
                        .WithMany("Zawodnicy")
                        .HasForeignKey("KlubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Klub");
                });

            modelBuilder.Entity("FantasyApp.Models.Klub", b =>
                {
                    b.Navigation("Zawodnicy");
                });

            modelBuilder.Entity("FantasyApp.Models.Mecz", b =>
                {
                    b.Navigation("Statystyki");
                });

            modelBuilder.Entity("FantasyApp.Models.Zawodnik", b =>
                {
                    b.Navigation("Statystyki");
                });
#pragma warning restore 612, 618
        }
    }
}
